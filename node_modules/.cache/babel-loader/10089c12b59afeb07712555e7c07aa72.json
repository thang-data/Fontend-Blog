{"ast":null,"code":"import { ALERT } from '../types/alertType';\nimport { GET_COMMENTS, UPDATE_COMMENT, UPDATE_REPLY, DELETE_COMMENT, DELETE_REPLY } from '../types/commentType';\nimport { postAPI, getAPI, patchAPI, deleteAPI } from '../../utils/FetchData';\nimport { checkTokenExp } from '../../utils/checkTokenExp';\nexport const createComment = (data, token) => async dispatch => {\n  const result = await checkTokenExp(token, dispatch);\n  const access_token = result ? result : token;\n\n  try {\n    await postAPI('comment', data, access_token); // dispatch({\n    //   type: CREATE_COMMENT,\n    //   payload: { ...res.data, user: data.user }\n    // })\n  } catch (err) {\n    dispatch({\n      type: ALERT,\n      payload: {\n        errors: err.response.data.msg\n      }\n    });\n  }\n};\nexport const getComments = (id, num) => async dispatch => {\n  try {\n    let limit = 4;\n    const res = await getAPI(`comments/blog/${id}?page=${num}&limit=${limit}`);\n    dispatch({\n      type: GET_COMMENTS,\n      payload: {\n        data: res.data.comments,\n        total: res.data.total\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: ALERT,\n      payload: {\n        errors: err.response.data.msg\n      }\n    });\n  }\n};\nexport const replyComment = (data, token) => async dispatch => {\n  const result = await checkTokenExp(token, dispatch);\n  const access_token = result ? result : token;\n\n  try {\n    await postAPI('reply_comment', data, access_token); // dispatch({\n    //   type: REPLY_COMMENT,\n    //   payload: { \n    //     ...res.data, \n    //     user: data.user,\n    //     reply_user: data.reply_user\n    //   }\n    // })\n  } catch (err) {\n    dispatch({\n      type: ALERT,\n      payload: {\n        errors: err.response.data.msg\n      }\n    });\n  }\n};\nexport const updateComment = (data, token) => async dispatch => {\n  const result = await checkTokenExp(token, dispatch);\n  const access_token = result ? result : token;\n\n  try {\n    dispatch({\n      type: data.comment_root ? UPDATE_REPLY : UPDATE_COMMENT,\n      payload: data\n    });\n    await patchAPI(`comment/${data._id}`, {\n      data\n    }, access_token);\n  } catch (err) {\n    dispatch({\n      type: ALERT,\n      payload: {\n        errors: err.response.data.msg\n      }\n    });\n  }\n};\nexport const deleteComment = (data, token) => async dispatch => {\n  const result = await checkTokenExp(token, dispatch);\n  const access_token = result ? result : token;\n\n  try {\n    dispatch({\n      type: data.comment_root ? DELETE_REPLY : DELETE_COMMENT,\n      payload: data\n    });\n    await deleteAPI(`comment/${data._id}`, access_token);\n  } catch (err) {\n    dispatch({\n      type: ALERT,\n      payload: {\n        errors: err.response.data.msg\n      }\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/nguye/Desktop/client/src/redux/actions/commentAction.ts"],"names":["ALERT","GET_COMMENTS","UPDATE_COMMENT","UPDATE_REPLY","DELETE_COMMENT","DELETE_REPLY","postAPI","getAPI","patchAPI","deleteAPI","checkTokenExp","createComment","data","token","dispatch","result","access_token","err","type","payload","errors","response","msg","getComments","id","num","limit","res","comments","total","replyComment","updateComment","comment_root","_id","deleteComment"],"mappings":"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","sourcesContent":["import { Dispatch } from 'redux'\n\nimport { ALERT, IAlertType } from '../types/alertType'\nimport { \n  ICreateCommentType,\n  GET_COMMENTS,\n  IGetCommentsType,\n  IReplyCommentType,\n  UPDATE_COMMENT,\n  UPDATE_REPLY,\n  IUpdateType,\n  DELETE_COMMENT,\n  DELETE_REPLY,\n  IDeleteType\n} from '../types/commentType'\n\nimport { IComment } from '../../utils/TypeScript'\nimport { postAPI, getAPI, patchAPI, deleteAPI } from '../../utils/FetchData'\nimport { checkTokenExp } from '../../utils/checkTokenExp'\n\n\n\nexport const createComment = (\n  data: IComment, token: string\n) => async(dispatch: Dispatch<IAlertType | ICreateCommentType>) => {\n  const result = await checkTokenExp(token, dispatch)\n  const access_token = result ? result : token\n  try {\n    await postAPI('comment', data, access_token)\n\n    // dispatch({\n    //   type: CREATE_COMMENT,\n    //   payload: { ...res.data, user: data.user }\n    // })\n    \n  } catch (err: any) {\n    dispatch({ type: ALERT, payload: { errors: err.response.data.msg } })\n  }\n}\n\n\nexport const getComments = (\n  id: string, num: number\n) => async(dispatch: Dispatch<IAlertType | IGetCommentsType>) => {\n  try {\n    let limit = 4;\n\n    const res = await getAPI(`comments/blog/${id}?page=${num}&limit=${limit}`)\n\n    dispatch({\n      type: GET_COMMENTS,\n      payload: {\n        data: res.data.comments,\n        total: res.data.total\n      }\n    })\n    \n  } catch (err: any) {\n    dispatch({ type: ALERT, payload: { errors: err.response.data.msg } })\n  }\n}\n\n\nexport const replyComment = (\n  data: IComment, token: string\n) => async(dispatch: Dispatch<IAlertType | IReplyCommentType>) => {\n  const result = await checkTokenExp(token, dispatch)\n  const access_token = result ? result : token\n  try {\n    await postAPI('reply_comment', data, access_token)\n\n    // dispatch({\n    //   type: REPLY_COMMENT,\n    //   payload: { \n    //     ...res.data, \n    //     user: data.user,\n    //     reply_user: data.reply_user\n    //   }\n    // })\n    \n  } catch (err: any) {\n    dispatch({ type: ALERT, payload: { errors: err.response.data.msg } })\n  }\n}\n\n\nexport const updateComment = (\n  data: IComment, token: string\n) => async(dispatch: Dispatch<IAlertType | IUpdateType>) => {\n  const result = await checkTokenExp(token, dispatch)\n  const access_token = result ? result : token\n  try {\n    dispatch({ \n      type: data.comment_root ? UPDATE_REPLY : UPDATE_COMMENT, \n      payload: data \n    })\n\n    await patchAPI(`comment/${data._id}`, { data }, access_token)\n\n  } catch (err: any) {\n    dispatch({ type: ALERT, payload: { errors: err.response.data.msg } })\n  }\n}\n\n\nexport const deleteComment = (\n  data: IComment, token: string\n) => async(dispatch: Dispatch<IAlertType | IDeleteType>) => {\n  const result = await checkTokenExp(token, dispatch)\n  const access_token = result ? result : token\n  try {\n    dispatch({ \n      type: data.comment_root ? DELETE_REPLY : DELETE_COMMENT, \n      payload: data \n    })\n    \n    await deleteAPI(`comment/${data._id}`, access_token)\n\n  } catch (err: any) {\n    dispatch({ type: ALERT, payload: { errors: err.response.data.msg } })\n  }\n}"]},"metadata":{},"sourceType":"module"}