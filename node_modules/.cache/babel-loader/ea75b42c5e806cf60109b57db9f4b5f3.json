{"ast":null,"code":"import { AUTH } from '../types/authType';\nimport { ALERT } from '../types/alertType';\nimport { checkImage, imageUpload } from '../../utils/ImageUpload';\nimport { patchAPI, getAPI } from '../../utils/FetchData';\nimport { checkPassword } from '../../utils/Valid';\nimport { GET_OTHER_INFO } from '../types/profileType';\nimport { checkTokenExp } from '../../utils/checkTokenExp';\nexport const updateUser = (avatar, name, auth) => async dispatch => {\n  if (!auth.access_token || !auth.user) return;\n  const result = await checkTokenExp(auth.access_token, dispatch);\n  const access_token = result ? result : auth.access_token;\n  let url = '';\n\n  try {\n    dispatch({\n      type: ALERT,\n      payload: {\n        loading: true\n      }\n    });\n\n    if (avatar) {\n      const check = checkImage(avatar);\n      if (check) return dispatch({\n        type: ALERT,\n        payload: {\n          errors: check\n        }\n      });\n      const photo = await imageUpload(avatar);\n      url = photo.url;\n    }\n\n    dispatch({\n      type: AUTH,\n      payload: {\n        access_token: auth.access_token,\n        user: { ...auth.user,\n          avatar: url ? url : auth.user.avatar,\n          name: name ? name : auth.user.name\n        }\n      }\n    });\n    const res = await patchAPI('user', {\n      avatar: url ? url : auth.user.avatar,\n      name: name ? name : auth.user.name\n    }, access_token);\n    dispatch({\n      type: ALERT,\n      payload: {\n        success: res.data.msg\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: ALERT,\n      payload: {\n        errors: err.response.data.msg\n      }\n    });\n  }\n};\nexport const resetPassword = (password, cf_password, token) => async dispatch => {\n  const result = await checkTokenExp(token, dispatch);\n  const access_token = result ? result : token;\n  const msg = checkPassword(password, cf_password);\n  if (msg) return dispatch({\n    type: ALERT,\n    payload: {\n      errors: msg\n    }\n  });\n\n  try {\n    dispatch({\n      type: ALERT,\n      payload: {\n        loading: true\n      }\n    });\n    const res = await patchAPI('reset_password', {\n      password\n    }, access_token);\n    dispatch({\n      type: ALERT,\n      payload: {\n        success: res.data.msg\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: ALERT,\n      payload: {\n        errors: err.response.data.msg\n      }\n    });\n  }\n};\nexport const getOtherInfo = id => async dispatch => {\n  try {\n    dispatch({\n      type: ALERT,\n      payload: {\n        loading: true\n      }\n    });\n    const res = await getAPI(`user/${id}`);\n    dispatch({\n      type: GET_OTHER_INFO,\n      payload: res.data\n    });\n    dispatch({\n      type: ALERT,\n      payload: {}\n    });\n  } catch (err) {\n    dispatch({\n      type: ALERT,\n      payload: {\n        errors: err.response.data.msg\n      }\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/nguye/Desktop/client/src/redux/actions/userAction.ts"],"names":["AUTH","ALERT","checkImage","imageUpload","patchAPI","getAPI","checkPassword","GET_OTHER_INFO","checkTokenExp","updateUser","avatar","name","auth","dispatch","access_token","user","result","url","type","payload","loading","check","errors","photo","res","success","data","msg","err","response","resetPassword","password","cf_password","token","getOtherInfo","id"],"mappings":"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","sourcesContent":["import { Dispatch } from 'redux'\nimport { IAuth, IAuthType, AUTH } from '../types/authType'\nimport { IAlertType, ALERT } from '../types/alertType'\n\nimport { checkImage, imageUpload } from '../../utils/ImageUpload'\nimport { patchAPI, getAPI } from '../../utils/FetchData'\nimport { checkPassword } from '../../utils/Valid'\n\nimport { \n  GET_OTHER_INFO,\n  IGetOtherInfoType\n} from '../types/profileType'\n\nimport { checkTokenExp } from '../../utils/checkTokenExp'\n\n\nexport const updateUser = (\n  avatar: File, name: string, auth: IAuth\n) => async (dispatch: Dispatch<IAlertType | IAuthType>) => {\n  if(!auth.access_token || !auth.user) return;\n\n  const result = await checkTokenExp(auth.access_token, dispatch)\n  const access_token = result ? result : auth.access_token\n\n  let url = '';\n  try {\n    dispatch({ type: ALERT, payload: {loading: true}})\n    if(avatar){\n      const check = checkImage(avatar)\n      if(check) \n        return dispatch({ type: ALERT,payload: { errors: check } })\n\n      const photo = await imageUpload(avatar)\n      url = photo.url\n    }\n\n    dispatch({ \n      type: AUTH,\n      payload: {\n        access_token: auth.access_token,\n        user: {\n          ...auth.user,\n          avatar: url ? url : auth.user.avatar, \n          name: name ? name : auth.user.name\n        }\n      } \n    })\n\n    const res = await patchAPI('user', { \n      avatar: url ? url : auth.user.avatar, \n      name: name ? name : auth.user.name\n    }, access_token)\n\n    dispatch({ type: ALERT, payload: {success: res.data.msg}})\n\n  } catch (err: any) {\n    dispatch({ type: ALERT, payload: {errors: err.response.data.msg}})\n  }\n}\n\n\nexport const resetPassword = (\n  password: string, cf_password: string, token: string\n) => async (dispatch: Dispatch<IAlertType | IAuthType>) => {\n  const result = await checkTokenExp(token, dispatch)\n  const access_token = result ? result : token\n\n  const msg = checkPassword(password, cf_password)\n  if(msg) return dispatch({ type: ALERT, payload: {errors: msg}})\n\n  try {\n    dispatch({ type: ALERT, payload: {loading: true}})\n\n    const res = await patchAPI('reset_password', { password }, access_token)\n\n    dispatch({ type: ALERT, payload: {success: res.data.msg}})\n\n  } catch (err: any) {\n    dispatch({ type: ALERT, payload: {errors: err.response.data.msg}})\n  }\n}\n\n\nexport const getOtherInfo = (id: string) => \nasync (dispatch: Dispatch<IAlertType | IGetOtherInfoType>) => {\n  try {\n    dispatch({ type: ALERT, payload: {loading: true}})\n\n    const res = await getAPI(`user/${id}`)\n\n    dispatch({\n      type: GET_OTHER_INFO,\n      payload: res.data\n    })\n\n    dispatch({ type: ALERT, payload: { }})\n\n  } catch (err: any) {\n    dispatch({ type: ALERT, payload: {errors: err.response.data.msg}})\n  }\n}"]},"metadata":{},"sourceType":"module"}