{"ast":null,"code":"import { AUTH } from '../types/authType';\nimport { ALERT } from '../types/alertType';\nimport { postAPI, getAPI } from '../../utils/FetchData';\nimport { validRegister, validPhone } from '../../utils/Valid';\nimport { checkTokenExp } from '../../utils/checkTokenExp';\nexport const login = userLogin => async dispatch => {\n  try {\n    dispatch({\n      type: ALERT,\n      payload: {\n        loading: true\n      }\n    });\n    const res = await postAPI('login', userLogin);\n    dispatch({\n      type: AUTH,\n      payload: res.data\n    });\n    dispatch({\n      type: ALERT,\n      payload: {\n        success: res.data.msg\n      }\n    });\n    localStorage.setItem('logged', 'devat-channel');\n  } catch (err) {\n    dispatch({\n      type: ALERT,\n      payload: {\n        errors: err.response.data.msg\n      }\n    });\n  }\n};\nexport const register = userRegister => async dispatch => {\n  const check = validRegister(userRegister);\n  if (check.errLength > 0) return dispatch({\n    type: ALERT,\n    payload: {\n      errors: check.errMsg\n    }\n  });\n\n  try {\n    dispatch({\n      type: ALERT,\n      payload: {\n        loading: true\n      }\n    });\n    const res = await postAPI('register', userRegister);\n    dispatch({\n      type: ALERT,\n      payload: {\n        success: res.data.msg\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: ALERT,\n      payload: {\n        errors: err.response.data.msg\n      }\n    });\n  }\n};\nexport const refreshToken = () => async dispatch => {\n  const logged = localStorage.getItem('logged');\n  if (logged !== 'devat-channel') return;\n\n  try {\n    dispatch({\n      type: ALERT,\n      payload: {\n        loading: true\n      }\n    });\n    const res = await getAPI('refresh_token');\n    dispatch({\n      type: AUTH,\n      payload: res.data\n    });\n    dispatch({\n      type: ALERT,\n      payload: {}\n    });\n  } catch (err) {\n    dispatch({\n      type: ALERT,\n      payload: {\n        errors: err.response.data.msg\n      }\n    });\n    localStorage.removeItem('logged');\n  }\n};\nexport const logout = token => async dispatch => {\n  const result = await checkTokenExp(token, dispatch);\n  const access_token = result ? result : token;\n\n  try {\n    localStorage.removeItem('logged');\n    dispatch({\n      type: AUTH,\n      payload: {}\n    });\n    await getAPI('logout', access_token);\n  } catch (err) {\n    dispatch({\n      type: ALERT,\n      payload: {\n        errors: err.response.data.msg\n      }\n    });\n  }\n};\nexport const googleLogin = id_token => async dispatch => {\n  try {\n    dispatch({\n      type: ALERT,\n      payload: {\n        loading: true\n      }\n    });\n    const res = await postAPI('google_login', {\n      id_token\n    });\n    dispatch({\n      type: AUTH,\n      payload: res.data\n    });\n    dispatch({\n      type: ALERT,\n      payload: {\n        success: res.data.msg\n      }\n    });\n    localStorage.setItem('logged', 'devat-channel');\n  } catch (err) {\n    dispatch({\n      type: ALERT,\n      payload: {\n        errors: err.response.data.msg\n      }\n    });\n  }\n};\nexport const facebookLogin = (accessToken, userID) => async dispatch => {\n  try {\n    dispatch({\n      type: ALERT,\n      payload: {\n        loading: true\n      }\n    });\n    const res = await postAPI('facebook_login', {\n      accessToken,\n      userID\n    });\n    dispatch({\n      type: AUTH,\n      payload: res.data\n    });\n    dispatch({\n      type: ALERT,\n      payload: {\n        success: res.data.msg\n      }\n    });\n    localStorage.setItem('logged', 'devat-channel');\n  } catch (err) {\n    dispatch({\n      type: ALERT,\n      payload: {\n        errors: err.response.data.msg\n      }\n    });\n  }\n};\nexport const loginSMS = phone => async dispatch => {\n  const check = validPhone(phone);\n  if (!check) return dispatch({\n    type: ALERT,\n    payload: {\n      errors: 'Phone number format is incorrect.'\n    }\n  });\n\n  try {\n    dispatch({\n      type: ALERT,\n      payload: {\n        loading: true\n      }\n    });\n    const res = await postAPI('login_sms', {\n      phone\n    });\n    if (!res.data.valid) verifySMS(phone, dispatch);\n  } catch (err) {\n    dispatch({\n      type: ALERT,\n      payload: {\n        errors: err.response.data.msg\n      }\n    });\n  }\n};\nexport const verifySMS = async (phone, dispatch) => {\n  const code = prompt('Enter your code');\n  if (!code) return;\n\n  try {\n    dispatch({\n      type: ALERT,\n      payload: {\n        loading: true\n      }\n    });\n    const res = await postAPI('sms_verify', {\n      phone,\n      code\n    });\n    dispatch({\n      type: AUTH,\n      payload: res.data\n    });\n    dispatch({\n      type: ALERT,\n      payload: {\n        success: res.data.msg\n      }\n    });\n    localStorage.setItem('logged', 'devat-channel');\n  } catch (err) {\n    dispatch({\n      type: ALERT,\n      payload: {\n        errors: err.response.data.msg\n      }\n    });\n    setTimeout(() => {\n      verifySMS(phone, dispatch);\n    }, 100);\n  }\n};\nexport const forgotPassword = account => async dispatch => {\n  try {\n    dispatch({\n      type: ALERT,\n      payload: {\n        loading: true\n      }\n    });\n    const res = await postAPI('forgot_password', {\n      account\n    });\n    dispatch({\n      type: ALERT,\n      payload: {\n        success: res.data.msg\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: ALERT,\n      payload: {\n        errors: err.response.data.msg\n      }\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/nguye/Desktop/client/src/redux/actions/authAction.ts"],"names":["AUTH","ALERT","postAPI","getAPI","validRegister","validPhone","checkTokenExp","login","userLogin","dispatch","type","payload","loading","res","data","success","msg","localStorage","setItem","err","errors","response","register","userRegister","check","errLength","errMsg","refreshToken","logged","getItem","removeItem","logout","token","result","access_token","googleLogin","id_token","facebookLogin","accessToken","userID","loginSMS","phone","valid","verifySMS","code","prompt","setTimeout","forgotPassword","account"],"mappings":"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","sourcesContent":["import { Dispatch } from 'redux'\nimport { AUTH, IAuthType } from '../types/authType'\nimport { ALERT, IAlertType } from '../types/alertType'\n\nimport { IUserLogin, IUserRegister } from '../../utils/TypeScript'\nimport { postAPI, getAPI } from '../../utils/FetchData'\nimport { validRegister, validPhone } from '../../utils/Valid'\nimport { checkTokenExp } from '../../utils/checkTokenExp'\n\n\nexport const login = (userLogin: IUserLogin) => \nasync (dispatch: Dispatch<IAuthType | IAlertType>) => {\n  try {\n    dispatch({ type: ALERT, payload: { loading: true } })\n\n    const res = await postAPI('login', userLogin)\n    \n    dispatch({ type: AUTH,payload: res.data })\n\n    dispatch({ type: ALERT, payload: { success: res.data.msg } })\n    localStorage.setItem('logged', 'devat-channel')\n    \n  } catch (err: any) {\n    dispatch({ type: ALERT, payload: { errors: err.response.data.msg } })\n  }\n}\n\n\nexport const register = (userRegister: IUserRegister) => \nasync (dispatch: Dispatch<IAuthType | IAlertType>) => {\n  const check = validRegister(userRegister)\n  \n  if(check.errLength > 0)\n    return dispatch({ type: ALERT, payload: { errors: check.errMsg } })\n\n  try {\n    dispatch({ type: ALERT, payload: { loading: true } })\n    \n    const res = await postAPI('register', userRegister)\n\n    dispatch({ type: ALERT, payload: { success: res.data.msg } })\n  } catch (err: any) {\n    dispatch({ type: ALERT, payload: { errors: err.response.data.msg } })\n  }\n}\n\n\nexport const refreshToken = () => \nasync (dispatch: Dispatch<IAuthType | IAlertType>) => {\n  const logged = localStorage.getItem('logged')\n  if(logged !== 'devat-channel') return;\n\n  try {\n    dispatch({ type: ALERT, payload: { loading: true } })\n    \n    const res = await getAPI('refresh_token')\n    \n    dispatch({ type: AUTH,payload: res.data })\n\n    dispatch({ type: ALERT, payload: { } })\n  } catch (err: any) {\n    dispatch({ type: ALERT, payload: { errors: err.response.data.msg } })\n    localStorage.removeItem('logged')\n  }\n}\n\n\nexport const logout = (token: string) => \nasync (dispatch: Dispatch<IAuthType | IAlertType>) => {\n  const result = await checkTokenExp(token, dispatch)\n  const access_token = result ? result : token\n  \n  try {\n    localStorage.removeItem('logged')\n    dispatch({ type: AUTH, payload: { } })\n    await getAPI('logout', access_token)\n  } catch (err: any) {\n    dispatch({ type: ALERT, payload: { errors: err.response.data.msg } })\n  }\n}\n\nexport const googleLogin = (id_token: string) => \nasync (dispatch: Dispatch<IAuthType | IAlertType>) => {\n  try {\n    dispatch({ type: ALERT, payload: { loading: true } })\n\n    const res = await postAPI('google_login', { id_token })\n    \n    dispatch({ type: AUTH,payload: res.data })\n\n    dispatch({ type: ALERT, payload: { success: res.data.msg } })\n    localStorage.setItem('logged', 'devat-channel')\n    \n  } catch (err: any) {\n    dispatch({ type: ALERT, payload: { errors: err.response.data.msg } })\n  }\n}\n\nexport const facebookLogin = (accessToken: string, userID: string) => \nasync (dispatch: Dispatch<IAuthType | IAlertType>) => {\n  try {\n    dispatch({ type: ALERT, payload: { loading: true } })\n\n    const res = await postAPI('facebook_login', { accessToken, userID })\n    \n    dispatch({ type: AUTH,payload: res.data })\n\n    dispatch({ type: ALERT, payload: { success: res.data.msg } })\n    localStorage.setItem('logged', 'devat-channel')\n    \n  } catch (err: any) {\n    dispatch({ type: ALERT, payload: { errors: err.response.data.msg } })\n  }\n}\n\n\nexport const loginSMS = (phone: string) => \nasync (dispatch: Dispatch<IAuthType | IAlertType>) => {\n  const check = validPhone(phone)\n  if(!check) \n    return dispatch({ \n      type: ALERT, \n      payload: { errors: 'Phone number format is incorrect.' }\n    });\n\n  try {\n    dispatch({ type: ALERT, payload: { loading: true } })\n\n    const res = await postAPI('login_sms', { phone })\n    \n    if(!res.data.valid)\n      verifySMS(phone, dispatch)\n    \n  } catch (err: any) {\n    dispatch({ type: ALERT, payload: { errors: err.response.data.msg } })\n  }\n}\n\nexport const verifySMS = async (\n  phone: string, dispatch: Dispatch<IAuthType | IAlertType>\n) => {\n    const code = prompt('Enter your code')\n    if(!code) return;\n\n    try {\n      dispatch({ type: ALERT, payload: { loading: true } })\n\n      const res = await postAPI('sms_verify', { phone, code })\n      \n      dispatch({ type: AUTH,payload: res.data })\n\n      dispatch({ type: ALERT, payload: { success: res.data.msg } })\n      localStorage.setItem('logged', 'devat-channel')\n    } catch (err: any) {\n      dispatch({ type: ALERT, payload: { errors: err.response.data.msg } })\n      setTimeout(() => {\n        verifySMS(phone, dispatch)\n      }, 100);\n    }\n    \n}\n\n\nexport const forgotPassword = (account: string) => \nasync (dispatch: Dispatch<IAuthType | IAlertType>) => {\n  try {\n    dispatch({ type: ALERT, payload: { loading: true } })\n\n    const res = await postAPI('forgot_password', { account })\n\n    dispatch({ type: ALERT, payload: { success: res.data.msg } })\n  } catch (err: any) {\n    dispatch({ type: ALERT, payload: { errors: err.response.data.msg } })\n  }\n}"]},"metadata":{},"sourceType":"module"}