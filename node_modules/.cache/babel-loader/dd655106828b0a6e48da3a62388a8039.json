{"ast":null,"code":"import _regeneratorRuntime from\"C:/Users/nguye/Desktop/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"C:/Users/nguye/Desktop/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{ALERT}from'../types/alertType';import{postAPI,getAPI,patchAPI,deleteAPI}from'../../utils/FetchData';import{CREATE_CATEGORY,GET_CATEGORIES,UPDATE_CATEGORY,DELETE_CATEGORY}from'../types/categoryType';import{checkTokenExp}from'../../utils/checkTokenExp';export var createCategory=function createCategory(name,token){return/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch){var result,access_token,res;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return checkTokenExp(token,dispatch);case 2:result=_context.sent;access_token=result?result:token;_context.prev=4;dispatch({type:ALERT,payload:{loading:true}});_context.next=8;return postAPI('category',{name:name},access_token);case 8:res=_context.sent;dispatch({type:CREATE_CATEGORY,payload:res.data.newCategory});dispatch({type:ALERT,payload:{loading:false}});_context.next=16;break;case 13:_context.prev=13;_context.t0=_context[\"catch\"](4);dispatch({type:ALERT,payload:{errors:_context.t0.response.data.msg}});case 16:case\"end\":return _context.stop();}}},_callee,null,[[4,13]]);}));return function(_x){return _ref.apply(this,arguments);};}();};export var getCategories=function getCategories(){return/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dispatch){var res;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.prev=0;dispatch({type:ALERT,payload:{loading:true}});_context2.next=4;return getAPI('category');case 4:res=_context2.sent;dispatch({type:GET_CATEGORIES,payload:res.data.categories});dispatch({type:ALERT,payload:{loading:false}});_context2.next=12;break;case 9:_context2.prev=9;_context2.t0=_context2[\"catch\"](0);dispatch({type:ALERT,payload:{errors:_context2.t0.response.data.msg}});case 12:case\"end\":return _context2.stop();}}},_callee2,null,[[0,9]]);}));return function(_x2){return _ref2.apply(this,arguments);};}();};export var updateCategory=function updateCategory(data,token){return/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(dispatch){var result,access_token;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.next=2;return checkTokenExp(token,dispatch);case 2:result=_context3.sent;access_token=result?result:token;_context3.prev=4;dispatch({type:UPDATE_CATEGORY,payload:data});_context3.next=8;return patchAPI(\"category/\".concat(data._id),{name:data.name},access_token);case 8:_context3.next=13;break;case 10:_context3.prev=10;_context3.t0=_context3[\"catch\"](4);dispatch({type:ALERT,payload:{errors:_context3.t0.response.data.msg}});case 13:case\"end\":return _context3.stop();}}},_callee3,null,[[4,10]]);}));return function(_x3){return _ref3.apply(this,arguments);};}();};export var deleteCategory=function deleteCategory(id,token){return/*#__PURE__*/function(){var _ref4=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(dispatch){var result,access_token;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:_context4.next=2;return checkTokenExp(token,dispatch);case 2:result=_context4.sent;access_token=result?result:token;_context4.prev=4;dispatch({type:DELETE_CATEGORY,payload:id});_context4.next=8;return deleteAPI(\"category/\".concat(id),access_token);case 8:_context4.next=13;break;case 10:_context4.prev=10;_context4.t0=_context4[\"catch\"](4);dispatch({type:ALERT,payload:{errors:_context4.t0.response.data.msg}});case 13:case\"end\":return _context4.stop();}}},_callee4,null,[[4,10]]);}));return function(_x4){return _ref4.apply(this,arguments);};}();};","map":{"version":3,"sources":["C:/Users/nguye/Desktop/client/src/redux/actions/categoryAction.ts"],"names":["ALERT","postAPI","getAPI","patchAPI","deleteAPI","CREATE_CATEGORY","GET_CATEGORIES","UPDATE_CATEGORY","DELETE_CATEGORY","checkTokenExp","createCategory","name","token","dispatch","result","access_token","type","payload","loading","res","data","newCategory","errors","response","msg","getCategories","categories","updateCategory","_id","deleteCategory","id"],"mappings":"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","sourcesContent":["import { Dispatch } from 'redux'\nimport { ALERT, IAlertType } from '../types/alertType'\n\nimport { postAPI, getAPI, patchAPI, deleteAPI } from '../../utils/FetchData'\nimport { ICategory } from '../../utils/TypeScript'\n\nimport { \n  CREATE_CATEGORY, \n  ICategoryType, \n  GET_CATEGORIES,\n  UPDATE_CATEGORY,\n  DELETE_CATEGORY\n} from '../types/categoryType'\n\nimport { checkTokenExp } from '../../utils/checkTokenExp'\n\nexport const createCategory = (name: string, token: string) => \nasync(dispatch: Dispatch<IAlertType | ICategoryType>) => {\n  const result = await checkTokenExp(token, dispatch)\n  const access_token = result ? result : token\n  try {\n    dispatch({ type: ALERT, payload: { loading: true }})\n\n    const res = await postAPI('category', { name }, access_token)\n\n    dispatch({\n      type: CREATE_CATEGORY,\n      payload: res.data.newCategory\n    })\n\n    dispatch({ type: ALERT, payload: { loading: false }})\n  } catch (err: any) {\n    dispatch({ type: ALERT, payload: { errors: err.response.data.msg }})\n  }\n}\n\nexport const getCategories = () => \nasync(dispatch: Dispatch<IAlertType | ICategoryType>) => {\n  try {\n    dispatch({ type: ALERT, payload: { loading: true }})\n\n    const res = await getAPI('category')\n    \n    dispatch({\n      type: GET_CATEGORIES,\n      payload: res.data.categories\n    })\n\n    dispatch({ type: ALERT, payload: { loading: false }})\n  } catch (err: any) {\n    dispatch({ type: ALERT, payload: { errors: err.response.data.msg }})\n  }\n}\n\nexport const updateCategory = (data: ICategory, token: string) => \nasync(dispatch: Dispatch<IAlertType | ICategoryType>) => {\n  const result = await checkTokenExp(token, dispatch)\n  const access_token = result ? result : token\n  try {\n\n    dispatch({ type: UPDATE_CATEGORY, payload: data })\n\n    await patchAPI(`category/${data._id}`, { \n      name: data.name \n    }, access_token)\n\n  } catch (err: any) {\n    dispatch({ type: ALERT, payload: { errors: err.response.data.msg }})\n  }\n}\n\nexport const deleteCategory = (id: string, token: string) => \nasync(dispatch: Dispatch<IAlertType | ICategoryType>) => {\n  const result = await checkTokenExp(token, dispatch)\n  const access_token = result ? result : token\n  try {\n    \n    dispatch({ type: DELETE_CATEGORY, payload: id })\n    await deleteAPI(`category/${id}`, access_token)\n\n  } catch (err: any) {\n    dispatch({ type: ALERT, payload: { errors: err.response.data.msg }})\n  }\n}"]},"metadata":{},"sourceType":"module"}