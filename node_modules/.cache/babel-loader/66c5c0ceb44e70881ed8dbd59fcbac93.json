{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nguye\\\\Desktop\\\\client\\\\src\\\\components\\\\editor\\\\ReactQuill.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useCallback } from 'react';\nimport ReactQuill from 'react-quill';\nimport 'react-quill/dist/quill.snow.css';\nimport { useDispatch } from 'react-redux';\nimport { checkImage, imageUpload } from '../../utils/ImageUpload';\nimport { ALERT } from '../../redux/types/alertType';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Quill = ({\n  setBody,\n  body\n}) => {\n  _s();\n\n  const dispatch = useDispatch();\n  const quillRef = useRef(null);\n  const modules = {\n    toolbar: {\n      container\n    }\n  }; // Custom image\n\n  const handleChangeImage = useCallback(() => {\n    const input = document.createElement('input');\n    input.type = \"file\";\n    input.accept = \"image/*\";\n    input.click();\n\n    input.onchange = async () => {\n      var _quill$getEditor$getS;\n\n      const files = input.files;\n      if (!files) return dispatch({\n        type: ALERT,\n        payload: {\n          errors: 'File does not exist.'\n        }\n      });\n      const file = files[0];\n      const check = checkImage(file);\n      if (check) return dispatch({\n        type: ALERT,\n        payload: {\n          errors: check\n        }\n      });\n      dispatch({\n        type: ALERT,\n        payload: {\n          loading: true\n        }\n      });\n      const photo = await imageUpload(file);\n      const quill = quillRef.current;\n      const range = quill === null || quill === void 0 ? void 0 : (_quill$getEditor$getS = quill.getEditor().getSelection()) === null || _quill$getEditor$getS === void 0 ? void 0 : _quill$getEditor$getS.index;\n\n      if (range !== undefined) {\n        quill === null || quill === void 0 ? void 0 : quill.getEditor().insertEmbed(range, 'image', `${photo.url}`);\n      }\n\n      dispatch({\n        type: ALERT,\n        payload: {\n          loading: false\n        }\n      });\n    };\n  }, [dispatch]);\n  useEffect(() => {\n    const quill = quillRef.current;\n    if (!quill) return;\n    let toolbar = quill.getEditor().getModule('toolbar');\n    toolbar.addHandler('image', handleChangeImage);\n  }, [handleChangeImage]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(ReactQuill, {\n      theme: \"snow\",\n      modules: modules,\n      placeholder: \"Write somethings...\",\n      onChange: e => setBody(e),\n      value: body,\n      ref: quillRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Quill, \"IayQbZyGemDFqA6L2YK2B3Mk5eA=\", false, function () {\n  return [useDispatch];\n});\n\n_c = Quill;\nlet container = [[{\n  'font': []\n}], [{\n  'header': [1, 2, 3, 4, 5, 6, false]\n}], [{\n  'size': ['small', false, 'large', 'huge']\n}], // custom dropdown\n['bold', 'italic', 'underline', 'strike'], // toggled buttons\n['blockquote', 'code-block'], [{\n  'color': []\n}, {\n  'background': []\n}], // dropdown with defaults from theme\n[{\n  'script': 'sub'\n}, {\n  'script': 'super'\n}], // superscript/subscript\n[{\n  'list': 'ordered'\n}, {\n  'list': 'bullet'\n}], [{\n  'indent': '-1'\n}, {\n  'indent': '+1'\n}], // outdent/indent\n[{\n  'direction': 'rtl'\n}], // text direction\n[{\n  'align': []\n}], ['clean', 'link', 'image', 'video']];\nexport default Quill;\n\nvar _c;\n\n$RefreshReg$(_c, \"Quill\");","map":{"version":3,"sources":["C:/Users/nguye/Desktop/client/src/components/editor/ReactQuill.tsx"],"names":["React","useEffect","useRef","useCallback","ReactQuill","useDispatch","checkImage","imageUpload","ALERT","Quill","setBody","body","dispatch","quillRef","modules","toolbar","container","handleChangeImage","input","document","createElement","type","accept","click","onchange","files","payload","errors","file","check","loading","photo","quill","current","range","getEditor","getSelection","index","undefined","insertEmbed","url","getModule","addHandler","e"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,EAAmCC,WAAnC,QAAsD,OAAtD;AACA,OAAOC,UAAP,MAAuB,aAAvB;AACA,OAAO,iCAAP;AAEA,SAASC,WAAT,QAA4B,aAA5B;AAEA,SAASC,UAAT,EAAqBC,WAArB,QAAwC,yBAAxC;AACA,SAASC,KAAT,QAAsB,6BAAtB;;;AAOA,MAAMC,KAAuB,GAAG,CAAC;AAACC,EAAAA,OAAD;AAAUC,EAAAA;AAAV,CAAD,KAAqB;AAAA;;AACnD,QAAMC,QAAQ,GAAGP,WAAW,EAA5B;AACA,QAAMQ,QAAQ,GAAGX,MAAM,CAAa,IAAb,CAAvB;AAEA,QAAMY,OAAO,GAAG;AAAEC,IAAAA,OAAO,EAAE;AAAEC,MAAAA;AAAF;AAAX,GAAhB,CAJmD,CAMnD;;AACA,QAAMC,iBAAiB,GAAGd,WAAW,CAAC,MAAM;AAC1C,UAAMe,KAAK,GAAGC,QAAQ,CAACC,aAAT,CAAuB,OAAvB,CAAd;AACAF,IAAAA,KAAK,CAACG,IAAN,GAAa,MAAb;AACAH,IAAAA,KAAK,CAACI,MAAN,GAAe,SAAf;AACAJ,IAAAA,KAAK,CAACK,KAAN;;AAEAL,IAAAA,KAAK,CAACM,QAAN,GAAiB,YAAY;AAAA;;AAC3B,YAAMC,KAAK,GAAGP,KAAK,CAACO,KAApB;AACA,UAAG,CAACA,KAAJ,EAAW,OAAOb,QAAQ,CAAC;AACzBS,QAAAA,IAAI,EAAEb,KADmB;AACZkB,QAAAA,OAAO,EAAE;AAAEC,UAAAA,MAAM,EAAE;AAAV;AADG,OAAD,CAAf;AAIX,YAAMC,IAAI,GAAGH,KAAK,CAAC,CAAD,CAAlB;AACA,YAAMI,KAAK,GAAGvB,UAAU,CAACsB,IAAD,CAAxB;AACA,UAAGC,KAAH,EAAU,OAAOjB,QAAQ,CAAC;AAAES,QAAAA,IAAI,EAAEb,KAAR;AAAekB,QAAAA,OAAO,EAAE;AAAEC,UAAAA,MAAM,EAAEE;AAAV;AAAxB,OAAD,CAAf;AAEVjB,MAAAA,QAAQ,CAAC;AAAES,QAAAA,IAAI,EAAEb,KAAR;AAAekB,QAAAA,OAAO,EAAE;AAAEI,UAAAA,OAAO,EAAE;AAAX;AAAxB,OAAD,CAAR;AACA,YAAMC,KAAK,GAAG,MAAMxB,WAAW,CAACqB,IAAD,CAA/B;AAEA,YAAMI,KAAK,GAAGnB,QAAQ,CAACoB,OAAvB;AACA,YAAMC,KAAK,GAAGF,KAAH,aAAGA,KAAH,gDAAGA,KAAK,CAAEG,SAAP,GAAmBC,YAAnB,EAAH,0DAAG,sBAAmCC,KAAjD;;AACA,UAAGH,KAAK,KAAKI,SAAb,EAAuB;AACrBN,QAAAA,KAAK,SAAL,IAAAA,KAAK,WAAL,YAAAA,KAAK,CAAEG,SAAP,GAAmBI,WAAnB,CAA+BL,KAA/B,EAAsC,OAAtC,EAAgD,GAAEH,KAAK,CAACS,GAAI,EAA5D;AACD;;AAED5B,MAAAA,QAAQ,CAAC;AAAES,QAAAA,IAAI,EAAEb,KAAR;AAAekB,QAAAA,OAAO,EAAE;AAAEI,UAAAA,OAAO,EAAE;AAAX;AAAxB,OAAD,CAAR;AACD,KApBD;AAqBD,GA3BoC,EA2BnC,CAAClB,QAAD,CA3BmC,CAArC;AA8BAX,EAAAA,SAAS,CAAC,MAAM;AACd,UAAM+B,KAAK,GAAGnB,QAAQ,CAACoB,OAAvB;AACA,QAAG,CAACD,KAAJ,EAAW;AAEX,QAAIjB,OAAO,GAAGiB,KAAK,CAACG,SAAN,GAAkBM,SAAlB,CAA4B,SAA5B,CAAd;AACA1B,IAAAA,OAAO,CAAC2B,UAAR,CAAmB,OAAnB,EAA4BzB,iBAA5B;AACD,GANQ,EAMP,CAACA,iBAAD,CANO,CAAT;AAQA,sBACE;AAAA,2BACE,QAAC,UAAD;AAAY,MAAA,KAAK,EAAC,MAAlB;AACA,MAAA,OAAO,EAAEH,OADT;AAEA,MAAA,WAAW,EAAC,qBAFZ;AAGA,MAAA,QAAQ,EAAE6B,CAAC,IAAIjC,OAAO,CAACiC,CAAD,CAHtB;AAIA,MAAA,KAAK,EAAEhC,IAJP;AAKA,MAAA,GAAG,EAAEE;AALL;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAUD,CAvDD;;GAAMJ,K;UACaJ,W;;;KADbI,K;AAyDN,IAAIO,SAAS,GAAG,CACd,CAAC;AAAE,UAAQ;AAAV,CAAD,CADc,EAEd,CAAC;AAAE,YAAU,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,KAAnB;AAAZ,CAAD,CAFc,EAGd,CAAC;AAAE,UAAQ,CAAC,OAAD,EAAU,KAAV,EAAiB,OAAjB,EAA0B,MAA1B;AAAV,CAAD,CAHc,EAGoC;AAElD,CAAC,MAAD,EAAS,QAAT,EAAmB,WAAnB,EAAgC,QAAhC,CALc,EAKoC;AAClD,CAAC,YAAD,EAAe,YAAf,CANc,EAOd,CAAC;AAAE,WAAS;AAAX,CAAD,EAAkB;AAAE,gBAAc;AAAhB,CAAlB,CAPc,EAOoC;AAClD,CAAC;AAAE,YAAU;AAAZ,CAAD,EAAqB;AAAE,YAAU;AAAZ,CAArB,CARc,EAQoC;AAElD,CAAC;AAAE,UAAQ;AAAV,CAAD,EAAuB;AAAE,UAAQ;AAAV,CAAvB,CAVc,EAWd,CAAC;AAAE,YAAU;AAAZ,CAAD,EAAoB;AAAE,YAAU;AAAZ,CAApB,CAXc,EAWoC;AAClD,CAAC;AAAE,eAAa;AAAf,CAAD,CAZc,EAYoC;AAClD,CAAC;AAAE,WAAS;AAAX,CAAD,CAbc,EAed,CAAC,OAAD,EAAU,MAAV,EAAkB,OAAlB,EAA0B,OAA1B,CAfc,CAAhB;AAkBA,eAAeP,KAAf","sourcesContent":["import React, { useEffect, useRef, useCallback } from 'react'\nimport ReactQuill from 'react-quill';\nimport 'react-quill/dist/quill.snow.css';\n\nimport { useDispatch } from 'react-redux'\n\nimport { checkImage, imageUpload } from '../../utils/ImageUpload'\nimport { ALERT } from '../../redux/types/alertType'\n\ninterface IProps {\n  setBody: (value: string) => void\n  body: string\n}\n\nconst Quill: React.FC<IProps> = ({setBody, body}) => {\n  const dispatch = useDispatch()\n  const quillRef = useRef<ReactQuill>(null)\n\n  const modules = { toolbar: { container }}\n\n  // Custom image\n  const handleChangeImage = useCallback(() => {\n    const input = document.createElement('input')\n    input.type = \"file\"\n    input.accept = \"image/*\"\n    input.click()\n\n    input.onchange = async () => {\n      const files = input.files\n      if(!files) return dispatch({\n        type: ALERT, payload: { errors: 'File does not exist.'}\n      });\n\n      const file = files[0]\n      const check = checkImage(file)\n      if(check) return dispatch({ type: ALERT, payload: { errors: check } });\n      \n      dispatch({ type: ALERT, payload: { loading: true } })\n      const photo = await imageUpload(file)\n\n      const quill = quillRef.current;\n      const range = quill?.getEditor().getSelection()?.index\n      if(range !== undefined){\n        quill?.getEditor().insertEmbed(range, 'image', `${photo.url}`)\n      }\n\n      dispatch({ type: ALERT, payload: { loading: false } })\n    }\n  },[dispatch])\n\n\n  useEffect(() => {\n    const quill = quillRef.current;\n    if(!quill) return;\n\n    let toolbar = quill.getEditor().getModule('toolbar')\n    toolbar.addHandler('image', handleChangeImage)\n  },[handleChangeImage])\n\n  return (\n    <div>\n      <ReactQuill theme=\"snow\"\n      modules={modules}\n      placeholder=\"Write somethings...\"\n      onChange={e => setBody(e)}\n      value={body}\n      ref={quillRef} />\n    </div>\n  )\n}\n\nlet container = [\n  [{ 'font': [] }],\n  [{ 'header': [1, 2, 3, 4, 5, 6, false] }],\n  [{ 'size': ['small', false, 'large', 'huge'] }],  // custom dropdown\n\n  ['bold', 'italic', 'underline', 'strike'],        // toggled buttons\n  ['blockquote', 'code-block'],\n  [{ 'color': [] }, { 'background': [] }],          // dropdown with defaults from theme\n  [{ 'script': 'sub'}, { 'script': 'super' }],      // superscript/subscript\n\n  [{ 'list': 'ordered'}, { 'list': 'bullet' }],\n  [{ 'indent': '-1'}, { 'indent': '+1' }],          // outdent/indent\n  [{ 'direction': 'rtl' }],                         // text direction\n  [{ 'align': [] }],\n\n  ['clean', 'link', 'image','video']\n]\n\nexport default Quill\n"]},"metadata":{},"sourceType":"module"}