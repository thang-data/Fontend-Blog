{"ast":null,"code":"import _regeneratorRuntime from\"C:/Users/nguye/Desktop/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"C:/Users/nguye/Desktop/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";export var checkImage=function checkImage(file){var types=['image/png','image/jpeg'];var err='';if(!file)return err=\"File does not exist.\";if(file.size>1024*1024)// 1mb\nerr=\"The largest image size is 1mb\";if(!types.includes(file.type))err=\"The image type is png / jpeg\";return err;};export var imageUpload=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(file){var formData,res,data;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:formData=new FormData();formData.append(\"file\",file);formData.append(\"upload_preset\",\"xwqohnif\");formData.append(\"cloud_name\",\"devat-channel\");_context.next=6;return fetch(\"https://api.cloudinary.com/v1_1/devat-channel/upload\",{method:\"POST\",body:formData});case 6:res=_context.sent;_context.next=9;return res.json();case 9:data=_context.sent;return _context.abrupt(\"return\",{public_id:data.public_id,url:data.secure_url});case 11:case\"end\":return _context.stop();}}},_callee);}));return function imageUpload(_x){return _ref.apply(this,arguments);};}();","map":{"version":3,"sources":["C:/Users/nguye/Desktop/client/src/utils/ImageUpload.ts"],"names":["checkImage","file","types","err","size","includes","type","imageUpload","formData","FormData","append","fetch","method","body","res","json","data","public_id","url","secure_url"],"mappings":"qSAAA,MAAO,IAAMA,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAACC,IAAD,CAAgB,CACxC,GAAMC,CAAAA,KAAK,CAAG,CAAC,WAAD,CAAc,YAAd,CAAd,CACA,GAAIC,CAAAA,GAAG,CAAG,EAAV,CACA,GAAG,CAACF,IAAJ,CAAU,MAAOE,CAAAA,GAAG,CAAG,sBAAb,CAEV,GAAGF,IAAI,CAACG,IAAL,CAAY,KAAO,IAAtB,CAA4B;AAC1BD,GAAG,CAAG,+BAAN,CAEF,GAAG,CAACD,KAAK,CAACG,QAAN,CAAeJ,IAAI,CAACK,IAApB,CAAJ,CACEH,GAAG,CAAG,8BAAN,CAEF,MAAOA,CAAAA,GAAP,CACD,CAZM,CAcP,MAAO,IAAMI,CAAAA,WAAW,0FAAG,iBAAON,IAAP,wIACnBO,QADmB,CACR,GAAIC,CAAAA,QAAJ,EADQ,CAEzBD,QAAQ,CAACE,MAAT,CAAgB,MAAhB,CAAwBT,IAAxB,EACAO,QAAQ,CAACE,MAAT,CAAgB,eAAhB,CAAiC,UAAjC,EACAF,QAAQ,CAACE,MAAT,CAAgB,YAAhB,CAA8B,eAA9B,EAJyB,sBAMPC,CAAAA,KAAK,CAAC,sDAAD,CAAyD,CAC9EC,MAAM,CAAE,MADsE,CAE9EC,IAAI,CAAEL,QAFwE,CAAzD,CANE,QAMnBM,GANmB,qCAWNA,CAAAA,GAAG,CAACC,IAAJ,EAXM,QAWnBC,IAXmB,+CAYlB,CAAEC,SAAS,CAAED,IAAI,CAACC,SAAlB,CAA6BC,GAAG,CAAEF,IAAI,CAACG,UAAvC,CAZkB,yDAAH,kBAAXZ,CAAAA,WAAW,4CAAjB","sourcesContent":["export const checkImage = (file: File) => {\n  const types = ['image/png', 'image/jpeg']\n  let err = ''\n  if(!file) return err = \"File does not exist.\"\n\n  if(file.size > 1024 * 1024) // 1mb\n    err = \"The largest image size is 1mb\"\n\n  if(!types.includes(file.type))\n    err = \"The image type is png / jpeg\"\n\n  return err;\n}\n\nexport const imageUpload = async (file: File) => {\n  const formData = new FormData()\n  formData.append(\"file\", file)\n  formData.append(\"upload_preset\", \"xwqohnif\")\n  formData.append(\"cloud_name\", \"devat-channel\")\n\n  const res = await fetch(\"https://api.cloudinary.com/v1_1/devat-channel/upload\", {\n    method: \"POST\",\n    body: formData\n  })\n\n  const data = await res.json()\n  return { public_id: data.public_id, url: data.secure_url };\n}"]},"metadata":{},"sourceType":"module"}