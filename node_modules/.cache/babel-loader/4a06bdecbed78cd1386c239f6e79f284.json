{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nguye\\\\Desktop\\\\client\\\\src\\\\components\\\\profile\\\\OtherInfo.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getOtherInfo } from '../../redux/actions/userAction';\nimport Loading from '../global/Loading';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst OtherInfo = ({\n  id\n}) => {\n  _s();\n\n  const [other, setOther] = useState();\n  const {\n    otherInfo\n  } = useSelector(state => state);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (!id) return;\n\n    if (otherInfo.every(user => user._id !== id)) {\n      dispatch(getOtherInfo(id));\n    } else {\n      const newUser = otherInfo.find(user => user._id === id);\n      if (newUser) setOther(newUser);\n    }\n  }, [id, otherInfo, dispatch]);\n  if (!other) return /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"profile_info text-center rounded\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"info_avatar\",\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: other.avatar,\n        alt: \"avatar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n      className: \"text-uppercase text-danger\",\n      children: other.role\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Name: \", /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"text-info\",\n        children: other.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Email / Phone number\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"text-info\",\n      children: other.account\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Join Date: \", /*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          color: '#ffc107'\n        },\n        children: new Date(other.createdAt).toLocaleString()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 20\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n\n_s(OtherInfo, \"C+BB44XMLay8+S9bpn6RrtDzMvk=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = OtherInfo;\nexport default OtherInfo;\n\nvar _c;\n\n$RefreshReg$(_c, \"OtherInfo\");","map":{"version":3,"sources":["C:/Users/nguye/Desktop/client/src/components/profile/OtherInfo.tsx"],"names":["React","useState","useEffect","useSelector","useDispatch","getOtherInfo","Loading","OtherInfo","id","other","setOther","otherInfo","state","dispatch","every","user","_id","newUser","find","avatar","role","name","account","color","Date","createdAt","toLocaleString"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAEA,SAASC,YAAT,QAA6B,gCAA7B;AAGA,OAAOC,OAAP,MAAoB,mBAApB;;;AAOA,MAAMC,SAA2B,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAU;AAAA;;AAC5C,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,EAAlC;AAEA,QAAM;AAAEU,IAAAA;AAAF,MAAgBR,WAAW,CAAES,KAAD,IAAsBA,KAAvB,CAAjC;AACA,QAAMC,QAAQ,GAAGT,WAAW,EAA5B;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACd,QAAG,CAACM,EAAJ,EAAQ;;AAER,QAAGG,SAAS,CAACG,KAAV,CAAgBC,IAAI,IAAIA,IAAI,CAACC,GAAL,KAAaR,EAArC,CAAH,EAA4C;AAC1CK,MAAAA,QAAQ,CAACR,YAAY,CAACG,EAAD,CAAb,CAAR;AACD,KAFD,MAEK;AACH,YAAMS,OAAO,GAAGN,SAAS,CAACO,IAAV,CAAeH,IAAI,IAAIA,IAAI,CAACC,GAAL,KAAaR,EAApC,CAAhB;AACA,UAAGS,OAAH,EAAYP,QAAQ,CAACO,OAAD,CAAR;AACb;AACF,GATQ,EASP,CAACT,EAAD,EAAKG,SAAL,EAAgBE,QAAhB,CATO,CAAT;AAYA,MAAG,CAACJ,KAAJ,EAAW,oBAAO,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,UAAP;AACX,sBACE;AAAK,IAAA,SAAS,EAAC,kCAAf;AAAA,4BACE;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA,6BACE;AAAK,QAAA,GAAG,EAAEA,KAAK,CAACU,MAAhB;AAAwB,QAAA,GAAG,EAAC;AAA5B;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,eAKE;AAAI,MAAA,SAAS,EAAC,4BAAd;AAAA,gBACGV,KAAK,CAACW;AADT;AAAA;AAAA;AAAA;AAAA,YALF,eASE;AAAA,wCACQ;AAAM,QAAA,SAAS,EAAC,WAAhB;AAAA,kBACHX,KAAK,CAACY;AADH;AAAA;AAAA;AAAA;AAAA,cADR;AAAA;AAAA;AAAA;AAAA;AAAA,YATF,eAeE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAfF,eAgBE;AAAM,MAAA,SAAS,EAAC,WAAhB;AAAA,gBACGZ,KAAK,CAACa;AADT;AAAA;AAAA;AAAA;AAAA,YAhBF,eAoBE;AAAA,6CACa;AAAM,QAAA,KAAK,EAAE;AAACC,UAAAA,KAAK,EAAE;AAAR,SAAb;AAAA,kBACP,IAAIC,IAAJ,CAASf,KAAK,CAACgB,SAAf,EAA0BC,cAA1B;AADO;AAAA;AAAA;AAAA;AAAA,cADb;AAAA;AAAA;AAAA;AAAA;AAAA,YApBF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA4BD,CA/CD;;GAAMnB,S;UAGkBJ,W,EACLC,W;;;KAJbG,S;AAiDN,eAAeA,SAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\n\nimport { getOtherInfo } from '../../redux/actions/userAction'\nimport { RootStore, IUser } from '../../utils/TypeScript'\n\nimport Loading from '../global/Loading'\n\n\ninterface IProps {\n  id: string\n}\n\nconst OtherInfo: React.FC<IProps> = ({id}) => {\n  const [other, setOther] = useState<IUser>()\n\n  const { otherInfo } = useSelector((state: RootStore) => state)\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    if(!id) return;\n\n    if(otherInfo.every(user => user._id !== id)){\n      dispatch(getOtherInfo(id))\n    }else{\n      const newUser = otherInfo.find(user => user._id === id)\n      if(newUser) setOther(newUser)\n    }\n  },[id, otherInfo, dispatch])\n\n\n  if(!other) return <Loading />;\n  return (\n    <div className=\"profile_info text-center rounded\">\n      <div className=\"info_avatar\">\n        <img src={other.avatar} alt=\"avatar\" />\n      </div>\n\n      <h5 className=\"text-uppercase text-danger\">\n        {other.role}\n      </h5>\n\n      <div>\n        Name: <span className=\"text-info\">\n          {other.name}\n        </span>\n      </div>\n\n      <div>Email / Phone number</div>\n      <span className=\"text-info\">\n        {other.account}\n      </span>\n\n      <div>\n        Join Date: <span style={{color: '#ffc107'}}>\n          { new Date(other.createdAt).toLocaleString() }\n        </span>\n      </div>\n    </div>\n  )\n}\n\nexport default OtherInfo\n"]},"metadata":{},"sourceType":"module"}