{"ast":null,"code":"import { ALERT } from '../types/alertType';\nimport { postAPI, getAPI, patchAPI, deleteAPI } from '../../utils/FetchData';\nimport { CREATE_CATEGORY, GET_CATEGORIES, UPDATE_CATEGORY, DELETE_CATEGORY } from '../types/categoryType';\nimport { checkTokenExp } from '../../utils/checkTokenExp';\nexport const createCategory = (name, token) => async dispatch => {\n  const result = await checkTokenExp(token, dispatch);\n  const access_token = result ? result : token;\n\n  try {\n    dispatch({\n      type: ALERT,\n      payload: {\n        loading: true\n      }\n    });\n    const res = await postAPI('category', {\n      name\n    }, access_token);\n    dispatch({\n      type: CREATE_CATEGORY,\n      payload: res.data.newCategory\n    });\n    dispatch({\n      type: ALERT,\n      payload: {\n        loading: false\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: ALERT,\n      payload: {\n        errors: err.response.data.msg\n      }\n    });\n  }\n};\nexport const getCategories = () => async dispatch => {\n  try {\n    dispatch({\n      type: ALERT,\n      payload: {\n        loading: true\n      }\n    });\n    const res = await getAPI('category');\n    dispatch({\n      type: GET_CATEGORIES,\n      payload: res.data.categories\n    });\n    dispatch({\n      type: ALERT,\n      payload: {\n        loading: false\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: ALERT,\n      payload: {\n        errors: err.response.data.msg\n      }\n    });\n  }\n};\nexport const updateCategory = (data, token) => async dispatch => {\n  const result = await checkTokenExp(token, dispatch);\n  const access_token = result ? result : token;\n\n  try {\n    dispatch({\n      type: UPDATE_CATEGORY,\n      payload: data\n    });\n    await patchAPI(`category/${data._id}`, {\n      name: data.name\n    }, access_token);\n  } catch (err) {\n    dispatch({\n      type: ALERT,\n      payload: {\n        errors: err.response.data.msg\n      }\n    });\n  }\n};\nexport const deleteCategory = (id, token) => async dispatch => {\n  const result = await checkTokenExp(token, dispatch);\n  const access_token = result ? result : token;\n\n  try {\n    dispatch({\n      type: DELETE_CATEGORY,\n      payload: id\n    });\n    await deleteAPI(`category/${id}`, access_token);\n  } catch (err) {\n    dispatch({\n      type: ALERT,\n      payload: {\n        errors: err.response.data.msg\n      }\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/nguye/Desktop/client/src/redux/actions/categoryAction.ts"],"names":["ALERT","postAPI","getAPI","patchAPI","deleteAPI","CREATE_CATEGORY","GET_CATEGORIES","UPDATE_CATEGORY","DELETE_CATEGORY","checkTokenExp","createCategory","name","token","dispatch","result","access_token","type","payload","loading","res","data","newCategory","err","errors","response","msg","getCategories","categories","updateCategory","_id","deleteCategory","id"],"mappings":"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","sourcesContent":["import { Dispatch } from 'redux'\nimport { ALERT, IAlertType } from '../types/alertType'\n\nimport { postAPI, getAPI, patchAPI, deleteAPI } from '../../utils/FetchData'\nimport { ICategory } from '../../utils/TypeScript'\n\nimport { \n  CREATE_CATEGORY, \n  ICategoryType, \n  GET_CATEGORIES,\n  UPDATE_CATEGORY,\n  DELETE_CATEGORY\n} from '../types/categoryType'\n\nimport { checkTokenExp } from '../../utils/checkTokenExp'\n\nexport const createCategory = (name: string, token: string) => \nasync(dispatch: Dispatch<IAlertType | ICategoryType>) => {\n  const result = await checkTokenExp(token, dispatch)\n  const access_token = result ? result : token\n  try {\n    dispatch({ type: ALERT, payload: { loading: true }})\n\n    const res = await postAPI('category', { name }, access_token)\n\n    dispatch({\n      type: CREATE_CATEGORY,\n      payload: res.data.newCategory\n    })\n\n    dispatch({ type: ALERT, payload: { loading: false }})\n  } catch (err: any) {\n    dispatch({ type: ALERT, payload: { errors: err.response.data.msg }})\n  }\n}\n\nexport const getCategories = () => \nasync(dispatch: Dispatch<IAlertType | ICategoryType>) => {\n  try {\n    dispatch({ type: ALERT, payload: { loading: true }})\n\n    const res = await getAPI('category')\n    \n    dispatch({\n      type: GET_CATEGORIES,\n      payload: res.data.categories\n    })\n\n    dispatch({ type: ALERT, payload: { loading: false }})\n  } catch (err: any) {\n    dispatch({ type: ALERT, payload: { errors: err.response.data.msg }})\n  }\n}\n\nexport const updateCategory = (data: ICategory, token: string) => \nasync(dispatch: Dispatch<IAlertType | ICategoryType>) => {\n  const result = await checkTokenExp(token, dispatch)\n  const access_token = result ? result : token\n  try {\n\n    dispatch({ type: UPDATE_CATEGORY, payload: data })\n\n    await patchAPI(`category/${data._id}`, { \n      name: data.name \n    }, access_token)\n\n  } catch (err: any) {\n    dispatch({ type: ALERT, payload: { errors: err.response.data.msg }})\n  }\n}\n\nexport const deleteCategory = (id: string, token: string) => \nasync(dispatch: Dispatch<IAlertType | ICategoryType>) => {\n  const result = await checkTokenExp(token, dispatch)\n  const access_token = result ? result : token\n  try {\n    \n    dispatch({ type: DELETE_CATEGORY, payload: id })\n    await deleteAPI(`category/${id}`, access_token)\n\n  } catch (err: any) {\n    dispatch({ type: ALERT, payload: { errors: err.response.data.msg }})\n  }\n}"]},"metadata":{},"sourceType":"module"}