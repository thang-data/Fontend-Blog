{"ast":null,"code":"import _regeneratorRuntime from\"C:/Users/nguye/Desktop/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"C:/Users/nguye/Desktop/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{ALERT}from'../types/alertType';import{GET_COMMENTS,UPDATE_COMMENT,UPDATE_REPLY,DELETE_COMMENT,DELETE_REPLY}from'../types/commentType';import{postAPI,getAPI,patchAPI,deleteAPI}from'../../utils/FetchData';import{checkTokenExp}from'../../utils/checkTokenExp';export var createComment=function createComment(data,token){return/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch){var result,access_token;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return checkTokenExp(token,dispatch);case 2:result=_context.sent;access_token=result?result:token;_context.prev=4;_context.next=7;return postAPI('comment',data,access_token);case 7:_context.next=12;break;case 9:_context.prev=9;_context.t0=_context[\"catch\"](4);dispatch({type:ALERT,payload:{errors:_context.t0.response.data.msg}});case 12:case\"end\":return _context.stop();}}},_callee,null,[[4,9]]);}));return function(_x){return _ref.apply(this,arguments);};}();};export var getComments=function getComments(id,num){return/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dispatch){var limit,res;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.prev=0;limit=4;_context2.next=4;return getAPI(\"comments/blog/\".concat(id,\"?page=\").concat(num,\"&limit=\").concat(limit));case 4:res=_context2.sent;dispatch({type:GET_COMMENTS,payload:{data:res.data.comments,total:res.data.total}});_context2.next=11;break;case 8:_context2.prev=8;_context2.t0=_context2[\"catch\"](0);dispatch({type:ALERT,payload:{errors:_context2.t0.response.data.msg}});case 11:case\"end\":return _context2.stop();}}},_callee2,null,[[0,8]]);}));return function(_x2){return _ref2.apply(this,arguments);};}();};export var replyComment=function replyComment(data,token){return/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(dispatch){var result,access_token;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.next=2;return checkTokenExp(token,dispatch);case 2:result=_context3.sent;access_token=result?result:token;_context3.prev=4;_context3.next=7;return postAPI('reply_comment',data,access_token);case 7:_context3.next=12;break;case 9:_context3.prev=9;_context3.t0=_context3[\"catch\"](4);dispatch({type:ALERT,payload:{errors:_context3.t0.response.data.msg}});case 12:case\"end\":return _context3.stop();}}},_callee3,null,[[4,9]]);}));return function(_x3){return _ref3.apply(this,arguments);};}();};export var updateComment=function updateComment(data,token){return/*#__PURE__*/function(){var _ref4=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(dispatch){var result,access_token;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:_context4.next=2;return checkTokenExp(token,dispatch);case 2:result=_context4.sent;access_token=result?result:token;_context4.prev=4;dispatch({type:data.comment_root?UPDATE_REPLY:UPDATE_COMMENT,payload:data});_context4.next=8;return patchAPI(\"comment/\".concat(data._id),{data:data},access_token);case 8:_context4.next=13;break;case 10:_context4.prev=10;_context4.t0=_context4[\"catch\"](4);dispatch({type:ALERT,payload:{errors:_context4.t0.response.data.msg}});case 13:case\"end\":return _context4.stop();}}},_callee4,null,[[4,10]]);}));return function(_x4){return _ref4.apply(this,arguments);};}();};export var deleteComment=function deleteComment(data,token){return/*#__PURE__*/function(){var _ref5=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(dispatch){var result,access_token;return _regeneratorRuntime.wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:_context5.next=2;return checkTokenExp(token,dispatch);case 2:result=_context5.sent;access_token=result?result:token;_context5.prev=4;dispatch({type:data.comment_root?DELETE_REPLY:DELETE_COMMENT,payload:data});_context5.next=8;return deleteAPI(\"comment/\".concat(data._id),access_token);case 8:_context5.next=13;break;case 10:_context5.prev=10;_context5.t0=_context5[\"catch\"](4);dispatch({type:ALERT,payload:{errors:_context5.t0.response.data.msg}});case 13:case\"end\":return _context5.stop();}}},_callee5,null,[[4,10]]);}));return function(_x5){return _ref5.apply(this,arguments);};}();};","map":{"version":3,"sources":["C:/Users/nguye/Desktop/client/src/redux/actions/commentAction.ts"],"names":["ALERT","GET_COMMENTS","UPDATE_COMMENT","UPDATE_REPLY","DELETE_COMMENT","DELETE_REPLY","postAPI","getAPI","patchAPI","deleteAPI","checkTokenExp","createComment","data","token","dispatch","result","access_token","type","payload","errors","response","msg","getComments","id","num","limit","res","comments","total","replyComment","updateComment","comment_root","_id","deleteComment"],"mappings":"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","sourcesContent":["import { Dispatch } from 'redux'\n\nimport { ALERT, IAlertType } from '../types/alertType'\nimport { \n  ICreateCommentType,\n  GET_COMMENTS,\n  IGetCommentsType,\n  IReplyCommentType,\n  UPDATE_COMMENT,\n  UPDATE_REPLY,\n  IUpdateType,\n  DELETE_COMMENT,\n  DELETE_REPLY,\n  IDeleteType\n} from '../types/commentType'\n\nimport { IComment } from '../../utils/TypeScript'\nimport { postAPI, getAPI, patchAPI, deleteAPI } from '../../utils/FetchData'\nimport { checkTokenExp } from '../../utils/checkTokenExp'\n\n\n\nexport const createComment = (\n  data: IComment, token: string\n) => async(dispatch: Dispatch<IAlertType | ICreateCommentType>) => {\n  const result = await checkTokenExp(token, dispatch)\n  const access_token = result ? result : token\n  try {\n    await postAPI('comment', data, access_token)\n\n    // dispatch({\n    //   type: CREATE_COMMENT,\n    //   payload: { ...res.data, user: data.user }\n    // })\n    \n  } catch (err: any) {\n    dispatch({ type: ALERT, payload: { errors: err.response.data.msg } })\n  }\n}\n\n\nexport const getComments = (\n  id: string, num: number\n) => async(dispatch: Dispatch<IAlertType | IGetCommentsType>) => {\n  try {\n    let limit = 4;\n\n    const res = await getAPI(`comments/blog/${id}?page=${num}&limit=${limit}`)\n\n    dispatch({\n      type: GET_COMMENTS,\n      payload: {\n        data: res.data.comments,\n        total: res.data.total\n      }\n    })\n    \n  } catch (err: any) {\n    dispatch({ type: ALERT, payload: { errors: err.response.data.msg } })\n  }\n}\n\n\nexport const replyComment = (\n  data: IComment, token: string\n) => async(dispatch: Dispatch<IAlertType | IReplyCommentType>) => {\n  const result = await checkTokenExp(token, dispatch)\n  const access_token = result ? result : token\n  try {\n    await postAPI('reply_comment', data, access_token)\n\n    // dispatch({\n    //   type: REPLY_COMMENT,\n    //   payload: { \n    //     ...res.data, \n    //     user: data.user,\n    //     reply_user: data.reply_user\n    //   }\n    // })\n    \n  } catch (err: any) {\n    dispatch({ type: ALERT, payload: { errors: err.response.data.msg } })\n  }\n}\n\n\nexport const updateComment = (\n  data: IComment, token: string\n) => async(dispatch: Dispatch<IAlertType | IUpdateType>) => {\n  const result = await checkTokenExp(token, dispatch)\n  const access_token = result ? result : token\n  try {\n    dispatch({ \n      type: data.comment_root ? UPDATE_REPLY : UPDATE_COMMENT, \n      payload: data \n    })\n\n    await patchAPI(`comment/${data._id}`, { data }, access_token)\n\n  } catch (err: any) {\n    dispatch({ type: ALERT, payload: { errors: err.response.data.msg } })\n  }\n}\n\n\nexport const deleteComment = (\n  data: IComment, token: string\n) => async(dispatch: Dispatch<IAlertType | IDeleteType>) => {\n  const result = await checkTokenExp(token, dispatch)\n  const access_token = result ? result : token\n  try {\n    dispatch({ \n      type: data.comment_root ? DELETE_REPLY : DELETE_COMMENT, \n      payload: data \n    })\n    \n    await deleteAPI(`comment/${data._id}`, access_token)\n\n  } catch (err: any) {\n    dispatch({ type: ALERT, payload: { errors: err.response.data.msg } })\n  }\n}"]},"metadata":{},"sourceType":"module"}